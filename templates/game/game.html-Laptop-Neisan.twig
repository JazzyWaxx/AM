<!DOCTYPE html>
<html>
<head>
    <title></title>
    <meta charset="utf-8">
    <link rel="stylesheet" type="text/css" href="{{ asset('assets/css/game/game.css') }}">
    <script src="https://code.jquery.com/jquery-3.3.1.min.js"></script>
    <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/vue"></script>
    <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
    <script src="{{ asset('bundles/fosjsrouting/js/router.js') }}"></script>
    <script src="{{ path('fos_js_routing_js', { callback: 'fos.Router.setData' }) }}"></script>

</head>
<body>
<div id="container">

    {% verbatim %}
    <div class="sidebar">
        <p v-if="turn == me['id']">A vous de jouer!</p>
        <p v-else>Au tour de votre adveraire</p>
        <ul class="dice">
            <li v-for="dice in dices['all']" v-on:click="selectDice(dice['type'])" v-bind:class="'dice'+dice['type']" >
                <div v-if="dice['status'] ==  0">{{ dice['value'] }}</div>
                <div v-else class="played">{{ dice['value'] }}</div>
            </li>
        </ul>
        <button v-if="dices['played'] > 0 && turn == me['id']" v-on:click="nextTurn">Je passe mon tour</button>
    </div>
    {% endverbatim %}

    <div id="game-wrap">
        <div id="game">
            {% verbatim %}
                <ul class="player-area" id="playerB">
                    <li
                    v-for="card in opponent['field']"
                    v-bind:data-id="card.id"
                    v-bind:style="{gridColumn: card.column, gridRow: card.row, backgroundImage: 'url(' + card.picture + ')', transform: 'rotate(180deg) translateY(calc((' + card.row + ' - 1) * 4vw))', zIndex: (11 - card.row)}"
                    v-bind:class="'row'+card.row"
                    v-on:click="moveCard(card.id)"
                    >

                    </li>
                </ul>
            {% endverbatim %}

            <ul id="gamePath">
                <li style="background-image: url({{ asset('assets/img/game/plateau.jpg') }})"></li>
            </ul>

            {% verbatim %}
                <ul class="player-area" id="playerA">
                    <li
                    v-for="card in me['field']"
                    v-bind:id="card.id"
                    v-bind:style="{gridColumn: card.column, gridRow: card.row, backgroundImage: 'url(' + card.picture + ')', transform: 'translateY(calc((' + card.row + ' - 1) * -4vw))', zIndex: card.row}"
                    v-bind:class="'row'+card.row"
                    v-bind:data-type="card.type"
                    v-on:click="moveCard(card.id)"
                    >
                    <div class="card-filter"></div>
                    </li>
                </ul>
            {% endverbatim %}
        </div>
    </div>

</div>

<script type="text/javascript">

    $(document).ready(function() {

        var AMgame = new Vue({
            el: '#container',
            data: {
                game: {
                    id: null,
                    messages: null
                },
                me: {
                    id: null,
                    field: null
                },
                opponent: {
                    id: null,
                    field: null
                },
                dices: {
                    all: [],
                    played: 0,
                    selected: []
                },
                turn: null,
            },
            methods: {
                async gameData(array) {
                    let result = await axios.get(Routing.generate('game_data', {game: '{{ gameId }}'}));
                    result = result.data;
                    $.each(array, function (i, data) {
                        if (data == "game") {

                            AMgame.game['id'] = result.gameId;

                        } else if (data == "me") {

                            AMgame.me['id'] = result.myId;
                            AMgame.me['field'] = result.myField;

                        } else if (data == "opponent") {

                            AMgame.opponent['id'] = result.opponentId;
                            AMgame.opponent['field'] = result.opponentField;

                        } else if (data == "dices") {

                            AMgame.dices['all'] = result.dices["dices"];
                            var playedDices = 0;
                            $.each(AMgame.dices["all"], function (i, dice) {
                                if (dice['status'] == 1) {
                                    playedDices++;
                                }
                            });
                            AMgame.dices['played'] = playedDices;

                        } else if (data == "turn") {

                            AMgame.turn = result.dices["turn"];

                        } else if (data == "*") {

                            AMgame.game['id'] = result.gameId;
                            AMgame.me["id"] = result.myId;
                            AMgame.me["field"] = result.myField;
                            AMgame.opponent['id'] = result.opponentId;
                            AMgame.opponent['field'] = result.opponentField;
                            AMgame.dices["all"] = result.dices["dices"];
                            var playedDices = 0;
                            $.each(AMgame.dices["all"], function (i, dice) {
                                if (dice['status'] == 1) {
                                    playedDices++;
                                }
                            });
                            AMgame.dices['played'] = playedDices;
                            AMgame.turn = result.dices["turn"];

                        }
                    })
                }, // array = ["game", "dices", "opponent", ...] -> update la vue
                async changeDiceStatus(type) {
                    let result = await axios.get(Routing.generate('game_change_dice_status', {game: this.game['id'], type: type}));
                },
                async moveCard(id) {
                    var selectedCard = null;

                    $.each(this.me['field'], function(i, card) {
                        if (card['id'] == id) { selectedCard = card }
                    });

                    let selectedDice = this.dices['selected'];

                    if (selectedDice.length !== 0 && this.turn == this.me['id'] && (selectedCard['type'] == selectedDice['type'] || selectedCard['type'] == 4)) {
                        this.preMoveCard(id, selectedDice['value']);
                        this.preChangeDiceStatus(selectedDice['type']);
                        let result = await axios.get(Routing.generate('game_move_card', {game: this.game['id'], card: id, value: selectedDice['value']}));
                        result = result.data;
                        if (result.code == 200) {
                            this.changeDiceStatus(selectedDice['type']);
                            this.deselectDice();
                        };
                        this.gameData(["*"]);
                    }
                },
                async nextTurn() {
                    let result = await axios.get(Routing.generate('game_next_turn', {game: this.game['id']}));
                    result = result.data;
                    if (result.code == 200) {
                        this.gameData(["dices", "turn", "opponent"]);
                    }
                },
                async checkFight() {

                    fight:
                        for (i = 1; i <= 11; i++) {
                            var myColumn = $.grep(this.me['field'], function (card) {
                                return card['column'] === i;
                            });
                            var opponentColumn = $.grep(this.opponent['field'], function (card) {
                                return card['column'] === 12-i;
                            });
                            if (myColumn !== [] && opponentColumn !== []) {

                            }

                        }

                    myColumn = this.sortByKeyDesc(myColumn, "row");
                },

                preMoveCard(id, value) {

                    let selectedCard = this.me['field'].find(c => c.id === id);

                    let currentRow = selectedCard['row'];
                    let currentColumn = selectedCard['column'];

                    let cardsToMove = this.sortByKeyAsc(this.me['field'].filter(function (obj) {
                        return obj.column === currentColumn && obj.row >= currentRow;
                    }), 'row');

                    if (cardsToMove.length <= 3) {

                        let nextColumn = selectedCard['column'] + value;
                        if (nextColumn > 11) { nextColumn = 11; }

                        let cardsOnNextColumn = this.sortByKeyAsc($.grep(this.me['field'], function (card) {
                            return card['column'] === nextColumn;
                        }), 'row');
                        let firstRowOfNextColumn = cardsOnNextColumn.length + 1;

                        $.each(cardsToMove, function (index, card) {
                            card['column'] = nextColumn;
                            card['row'] = card['row'] - currentRow + firstRowOfNextColumn;
                        });

                    }


                },
                preChangeDiceStatus(type) {
                    let dice = this.dices['all'].find(d => d.type === type);
                    this.dices['selected'] = [];
                    dice['status'] = 1;
                },


                selectDice(type) {
                    if (this.turn == this.me['id']) {
                        let selectedDice = this.dices['all'].find(d => d.type === type);
                        console.log(selectedDice);
                        if (selectedDice !== []) {
                            $("#playerA li .card-filter").css({opacity: "0.5"});
                            $("#playerA li").css({borderColor: "#565656"});
                            $("#playerA li[data-type="+type+"], #playerA li[data-type=4]").css({opacity: "1"});
                            $("#playerA li[data-type="+type+"] .card-filter, #playerA li[data-type=4] .card-filter").css({opacity: "0"});
                        }
                        this.dices['selected'] = selectedDice;
                    }
                },
                deselectDice() {
                    this.dices['selected'] = [];
                    $("#playerA li .card-filter").css({opacity: "0"});
                    $("#playerA li").css({borderColor: "#565656"});
                },
                checkGame() {

                    if (this.dices['all'] !== []) {
                        if (this.turn == this.me['id']) { // Si c'est mon TOUR
                            /*this.gameData(['dices', 'turn']);*/ // Rafraichir dés et tour
                            // this.checkFight();
                        } else { // Si TOUR de l'adversaire
                            this.gameData(['dices', 'turn', 'opponent', 'me']); // Rafraichir dés, tour, plateau adversaire et moi
                        }
                    }
                },

                sortByKeyDesc(array, key) {
                    return array.sort(function (a, b) {
                        var x = a[key]; var y = b[key];
                        return ((x > y) ? -1 : ((x < y) ? 1 : 0));
                    });
                },
                sortByKeyAsc(array, key) {
                    return array.sort(function (a, b) {
                        var x = a[key]; var y = b[key];
                        return ((x < y) ? -1 : ((x > y) ? 1 : 0));
                    });
                },
            },
            created() {
                this.gameData(["*"]);
                setInterval(this.checkGame, 2000);
            }
        });

        function elementCorrections() {
            var scrollCenter = $('#game').height()/2 + parseFloat($('#game').css('padding-top')) - $(window).height()/2;
            $('#game-wrap').scrollTop(scrollCenter);
            $('.sidebar').width($('body').width() - $('#game-wrap').width());
        }
        elementCorrections();
        $( window ).resize(function() {
            elementCorrections();
        });

    });

</script>
</body>
</html>